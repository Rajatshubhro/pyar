#!/usr/bin/env python3
# encoding: utf-8
"""Command line interface for PyAR"""
import argparse
import datetime
import logging
import os
import sys
import time

import numpy as np

from pyar import reactor, tabu, aggregator, optimiser, Molecule

logger = logging.getLogger('pyar')
handler = logging.FileHandler('pyar.log', 'w')


def argument_parse():
    """ Parse command line arguments"""
    parser = argparse.ArgumentParser(prog='PyAR', description='PyAR is a \
             program to predict aggregation, reaction, clustering.  \
             There are also modules for stochastic generation of  \
             orientations of two more molecules and atoms')

    parser.add_argument("input_files", metavar='files',
                        type=str, nargs='+',
                        help='input coordinate files')

    parser.add_argument('-N', dest='hm_orientations',
                        help='how many orientations to be used')

    parser.add_argument('--site', type=int, nargs=2,
                        help='atom for site specific '
                             'aggregation/solvation')

    run_type_group = parser.add_mutually_exclusive_group(required=True)

    run_type_group.add_argument("-r", "--react",
                                help="Run a reactor calculation",
                                action='store_true')

    run_type_group.add_argument("-a", "--aggregate",
                                help="Run a aggregator calculation",
                                action='store_true')

    run_type_group.add_argument("-ba", "--binary-aggregate",
                                help="Run a binary aggregation",
                                action='store_true')

    run_type_group.add_argument("-ta", "--ternary-aggregate",
                                help="Run a ternary aggregation",
                                action='store_true')

    run_type_group.add_argument("--scan-bond", nargs=2, type=int,
                                help="scan a bond between the given atoms of two"
                                     "fragments")

    aggregator_group = parser.add_argument_group('aggregator',
                                                 'Aggregator specific option')

    aggregator_group.add_argument('-as', '--aggregate-size', type=int,
                                  help='number of monomers in aggregate')

    binary_aggregator_group = parser.add_argument_group('binary_aggregator', 'Binary_aggregator specific option')

    binary_aggregator_group.add_argument('-fa', '--size-of-fragment-one', type=int, help='size of atom1')

    binary_aggregator_group.add_argument('-fb', '--size-of-fragment-two', type=int, help='size of atom2')

    binary_aggregator_group.add_argument('-fc', '--size-of-fragment-three', type=int, help='size of atom3')

    binary_aggregator_group.add_argument('-mns', '--maximum-number-of-seeds', type=int,
                                         default=8, help='maximum number of seeds')

    reactor_group = parser.add_argument_group('reactor',
                                              'Reactor specific option')

    reactor_group.add_argument('-gmin', type=float,
                               help='minimum value of gamma')

    reactor_group.add_argument('-gmax', type=float,
                               help='maximum value of gamma')

    chemistry_group = parser.add_argument_group('chemistry', 'Options related\
                                           to model chemistry')

    chemistry_group.add_argument("-c", "--charge", type=int, default=0,
                                 help="Charge of the system")

    chemistry_group.add_argument("-m", "--multiplicity", type=int,
                                 default=1, help="Multiplicity of the system")

    chemistry_group.add_argument("--scftype", type=str, choices=['rhf', 'uhf'],
                                 default='rhf',
                                 help="specify rhf or uhf (default=rhf)")

    chemistry_group.add_argument("--software", type=str,
                                 choices=['turbomole', 'obabel', 'mopac',
                                          'xtb', 'xtb_turbo', 'orca', 'psi4'],
                                 required=True, help="Software")

    parser.add_argument('-v', '--verbosity', default=1,
                        choices=[0, 1, 2, 3, 4], type=int,
                        help="increase output verbosity (0=Debug; 1=Info; "
                             "2: Warning; 3: Error; 4: Critical)")

    return parser.parse_args()


def setup_molecules(input_files):
    molecules = []
    for each_file in input_files:
        try:
            mol = Molecule.Molecule.from_xyz(each_file)
            logger.info(each_file)
            molecules.append(mol)
        except IOError:
            logger.critical("File {} does not exist".format(each_file))
            sys.exit()
    logger.info("I've parsed these molecules as input: {}".format(
        [i.name for i in molecules]))
    return molecules


def main():
    args = argument_parse()
    if args.verbosity == 0:
        logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(name)-12s %(filename)s %(funcName)s '
                                      '%(lineno)d %(levelname)-8s: %(message)s')
    elif args.verbosity == 1:
        formatter = logging.Formatter('%(message)s')
        logger.setLevel(logging.INFO)
    elif args.verbosity == 2:
        formatter = logging.Formatter('%(message)s')
        logger.setLevel(logging.WARNING)
    elif args.verbosity == 3:
        formatter = logging.Formatter('%(message)s')
        logger.setLevel(logging.ERROR)
    elif args.verbosity == 4:
        formatter = logging.Formatter('%(message)s')
        logger.setLevel(logging.CRITICAL)
    else:
        formatter = logging.Formatter('%(message)s')
        logger.setLevel(logging.CRITICAL)

    handler.setFormatter(formatter)
    logger.addHandler(handler)

    logger.info('Starting PyAR at %s in %s' % (datetime.datetime.now(),
                                               os.getcwd()))
    logger.debug('Logging level is %d' % args.verbosity)
    logger.debug('Parsed arguments %s' % args)

    method_args = {
        'charge': args.charge,
        'multiplicity': args.multiplicity,
        'scftype': args.scftype,
        'software': args.software
    }
    logger.debug(args)
    maximum_number_of_seeds = args.maximum_number_of_seeds
    logger.info('Charge:        %s' % method_args['charge'])
    logger.info('Multiplicity:  %s' % method_args['multiplicity'])
    logger.info('SCF Type:      %s' % method_args['scftype'])

    logger.info('QM Software:  %s' % method_args['software'])

    how_many_orientations = args.hm_orientations
    logger.info('%s orientations will be used' % how_many_orientations)

    input_molecules = setup_molecules(args.input_files)

    if args.site is None:
        site = None
        proximity_factor = 2.3
    else:
        site = args.site
        proximity_factor = 2.3

    if args.aggregate:
        size_of_aggregate = args.aggregate_size
        if size_of_aggregate is None:
            logger.error('For an Aggregation run '
                         'specify the aggregate size '
                         '(number of monomers to be added) '
                         'using the argument\n -as <integer>')
            sys.exit('Missing arguments: -as #')

        if how_many_orientations is None:
            logger.error("For aggregation, specify how many orientations"
                         "are to be used, by the argument\n"
                         "-number_of_orientations <number of orientations>")
            sys.exit('Missing arguments: -N #')

        if len(input_molecules) == 1:
            logger.error('Provide at least two files')
            sys.exit('Missing arguments: Provide at least two files')
        else:
            monomer = input_molecules[-1]
            seeds = input_molecules[:-1]

        t1 = time.clock()
        aggregator.aggregate(seeds, monomer,
                             aggregate_size=size_of_aggregate,
                             hm_orientations=how_many_orientations,
                             method=method_args, maximum_number_of_seeds=maximum_number_of_seeds)

        logger.info('Total Time: {}'.format(time.clock() - t1))

    if args.binary_aggregate:
        number_of_fragment_one = args.size_of_fragment_one
        number_of_fragment_two = args.size_of_fragment_two
        if number_of_fragment_one is None or number_of_fragment_two is None:
            logger.error("For binary aggregation, specify aggregate size of"
                         " moiety 1 and 2 as <integers>")
            sys.exit("For binary aggregation, specify aggregate size of"
                     " moiety 1 and 2 as <integers>")
        if how_many_orientations is None:
            logger.error("Any aggregation requires the number of orientations"
                         " to be used")
            sys.exit("provide the number of orientations (-N #)")
        if len(input_molecules) == 1:
            logger.error("For binary aggregation, provide two moieties")
        else:
            seed_a = input_molecules[:-1]
            seed_b = input_molecules[-1:]
            logger.debug(seed_a)
            logger.debug(seed_b)
            t1 = time.clock()
            aggregator.binary_aggregate(seed_a, seed_b, number_of_fragment_one,
                                        number_of_fragment_two,
                                        hm_orientations=how_many_orientations,
                                        method=method_args,
                                        maximum_number_of_seeds=maximum_number_of_seeds)

            logger.info('Total Time: {}'.format(time.clock() - t1))

    if args.ternary_aggregate:
        number_of_fragment_one = args.size_of_fragment_one
        number_of_fragment_two = args.size_of_fragment_two
        number_of_fragment_three = args.size_of_fragment_three
        if number_of_fragment_one is None or \
                number_of_fragment_two is None or \
                number_of_fragment_three is None:
            logger.error("For binary aggregation, specify aggregate size of"
                         " moiety 1, 2, and 3 as <integers>")
            sys.exit("For binary aggregation, specify aggregate size of"
                     " moiety 1,2, and 3 as <integers>")
        if how_many_orientations is None:
            logger.error("Any aggregation requires the number of orientations"
                         " to be used")
            sys.exit("provide the number of orientations (-N #)")
        if len(input_molecules) != 3:
            logger.error("For ternary aggregation, provide three moieties")
        else:
            seed_a = [input_molecules[0]]
            seed_b = [input_molecules[1]]
            seed_c = [input_molecules[2]]
            logger.debug(seed_a)
            logger.debug(seed_b)
            logger.debug(seed_c)
            t1 = time.clock()
            aggregator.ternary_aggregate(seed_a, seed_b, seed_c,
                                         number_of_fragment_one,
                                         number_of_fragment_two,
                                         number_of_fragment_three,
                                         hm_orientations=how_many_orientations,
                                         method=method_args,
                                         maximum_number_of_seeds=maximum_number_of_seeds)

        logger.info('Total Time: {}'.format(time.clock() - t1))

    if args.react:
        minimum_gamma = args.gmin
        maximum_gamma = args.gmax
        if len(input_molecules) == 1:
            logger.error('Reactor requires at least two molecules')
            sys.exit('Missing arguments: provide at least two molecules')
        if minimum_gamma is None or maximum_gamma is None:
            logger.error('For a Reactor run specify the '
                         'values of gamma_min and gamma_max using \n'
                         '-gmin <integer> -gmax <integer>')
            sys.exit('missing arguments: -gmin <integer> -gmax <integer>')
        if how_many_orientations is None:
            logger.error("For reaction, specify how many orientations"
                         "are to be used, by the argument\n"
                         "-number_of_orientations <number of orientations>")
            sys.exit('Missing arguments: -N #')

        if site is not None:
            site = [site[0], input_molecules[0].number_of_atoms + site[1]]
        t1 = time.clock()
        number_of_orientations = int(how_many_orientations)
        reactor.react(input_molecules[0], input_molecules[1],
                      gamma_min=minimum_gamma, gamma_max=maximum_gamma,
                      hm_orientations=number_of_orientations,
                      method=method_args,
                      site=site, proximity_factor=proximity_factor)
        logger.info('Total run time: {}'.format(time.clock() - t1))
        return

    if args.scan_bond:
        a = args.scan_bond[0]
        b = input_molecules[0].number_of_atoms + args.scan_bond[1]
        if how_many_orientations is None:
            logger.error("For aggregation, specify how many orientations"
                         "are    to be used, by the argument\n"
                         "-N <number of orientations>")
            sys.exit('Missing arguments: -N #')

        number_of_orientations = int(how_many_orientations)
        molecules = tabu.generate_guess_for_bonding('abc', input_molecules[0],
                                                    input_molecules[1], a, b,
                                                    int(number_of_orientations))
        for each_molecule in molecules:
            coordinates = each_molecule.coordinates
            start_dist = np.linalg.norm(coordinates[a] - coordinates[b])
            final_distance = each_molecule.covalent_radius[a] + \
                             each_molecule.covalent_radius[b]
            step = int(abs(final_distance - start_dist) * 10)
            if args.software == 'orca':
                c_k = '\n!ScanTS\n% geom scan B ' + str(a) + ' ' + str(b) + \
                      '= ' + str(start_dist) + ', ' + str(final_distance) + \
                      ', ' + str(step) + ' end end\n'

                optimiser.optimise(each_molecule, method_args, 0.0,
                                   custom_keyword=c_k)
            else:
                logger.error('Optimization with %s is not implemented '
                             'yet' % args.software)


if __name__ == "__main__":
    main()
