#!/usr/bin/env python3
# encoding: utf-8
"""Command line interface for pymlgen"""

import argparse
import logging
import sys

import pymlgen.data_analysis.clustering
from pymlgen.Molecule import Molecule

logger = logging.getLogger('pymlgen')
handler = logging.FileHandler('clustering.log', 'w')
formatter = logging.Formatter('%(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

parser = argparse.ArgumentParser()
parser.add_argument('input_files', type=str, nargs='+',
                    help="input xyz files for analysis")
parser.add_argument('-m', '--mode', choices=['filter', 'cluster'],
                    default='cluster',
                    help="Choose the mode, filter or cluster")
parser.add_argument('-cf', '--clustering_features', choices=['fingerprint', 'scm', 'moi', 'fsmd', 'soap', 'mbtr', 'ani', 'lmbtr', 'acsf', 'sinematrix', 'vallornav'],
                    default='fingerprint',
                    help="Choose the features to be used for clustering")

args = parser.parse_args()
input_files = args.input_files

if len(input_files) < 2:
    print('Not enough files to cluster')
    sys.exit(0)

mols = []
for each_file in input_files:
    mol = Molecule.from_xyz(each_file)
    mol.energy = pymlgen.data_analysis.clustering.read_energy_from_xyz_file(each_file)
    mols.append(mol)

pymlgen.data_analysis.clustering.plot_energy_histogram(mols)
selected = []
if args.mode == 'cluster':
    selected = pymlgen.data_analysis.clustering.choose_geometries(mols, features=args.clustering_features)
if args.mode == 'filter':
    selected = pymlgen.data_analysis.clustering.remove_similar(mols)

fls = []
for one in selected:
    fls.append(one.name + '.xyz')
print(' '.join(fls))
